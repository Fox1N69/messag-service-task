// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMessageByID = `-- name: GetMessageByID :one
SELECT id,
  content,
  created_at,
  status_id,
  processed,
  kafka_topic,
  kafka_partition,
  kafka_offset
FROM messages
WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.StatusID,
		&i.Processed,
		&i.KafkaTopic,
		&i.KafkaPartition,
		&i.KafkaOffset,
	)
	return i, err
}

const getMessageStatistics = `-- name: GetMessageStatistics :one
SELECT
  COUNT(CASE WHEN processed = TRUE THEN 1 END) AS processed_count,
  COUNT(CASE WHEN processed = FALSE AND status_id = 1 THEN 1 END) AS received_count, -- assuming status ID 1 is "Received"
  COUNT(CASE WHEN processed = FALSE AND status_id = 2 THEN 1 END) AS processing_count  -- assuming status ID 2 is "Processing"
FROM messages
`

type GetMessageStatisticsRow struct {
	ProcessedCount  int64
	ReceivedCount   int64
	ProcessingCount int64
}

func (q *Queries) GetMessageStatistics(ctx context.Context) (GetMessageStatisticsRow, error) {
	row := q.db.QueryRow(ctx, getMessageStatistics)
	var i GetMessageStatisticsRow
	err := row.Scan(&i.ProcessedCount, &i.ReceivedCount, &i.ProcessingCount)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id,
  content,
  created_at,
  status_id,
  processed,
  kafka_topic,
  kafka_partition,
  kafka_offset
FROM messages
`

func (q *Queries) GetMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.StatusID,
			&i.Processed,
			&i.KafkaTopic,
			&i.KafkaPartition,
			&i.KafkaOffset,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessedMessages = `-- name: GetProcessedMessages :many
SELECT id,
  content,
  created_at,
  status_id,
  processed,
  kafka_topic,
  kafka_partition,
  kafka_offset
FROM messages
WHERE processed = TRUE
`

func (q *Queries) GetProcessedMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getProcessedMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.StatusID,
			&i.Processed,
			&i.KafkaTopic,
			&i.KafkaPartition,
			&i.KafkaOffset,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessedMessagesCount = `-- name: GetProcessedMessagesCount :one
SELECT COUNT(*) AS count
FROM messages
WHERE processed = TRUE
`

func (q *Queries) GetProcessedMessagesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getProcessedMessagesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalMessages = `-- name: GetTotalMessages :one
SELECT COUNT(*) AS count FROM messages
`

func (q *Queries) GetTotalMessages(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalMessages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO messages (content, status_id)
VALUES ($1, $2)
`

type InsertMessageParams struct {
	Content  string
	StatusID pgtype.Int8
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) error {
	_, err := q.db.Exec(ctx, insertMessage, arg.Content, arg.StatusID)
	return err
}

const updateMessageProcessingDetails = `-- name: UpdateMessageProcessingDetails :exec
UPDATE messages
SET processed = TRUE,
    kafka_topic = $2,
    kafka_partition = $3,
    kafka_offset = $4
WHERE id = $1
`

type UpdateMessageProcessingDetailsParams struct {
	ID             int64
	KafkaTopic     pgtype.Text
	KafkaPartition pgtype.Int4
	KafkaOffset    pgtype.Int8
}

func (q *Queries) UpdateMessageProcessingDetails(ctx context.Context, arg UpdateMessageProcessingDetailsParams) error {
	_, err := q.db.Exec(ctx, updateMessageProcessingDetails,
		arg.ID,
		arg.KafkaTopic,
		arg.KafkaPartition,
		arg.KafkaOffset,
	)
	return err
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
UPDATE messages
SET status_id = $1
WHERE id = $2
`

type UpdateMessageStatusParams struct {
	StatusID pgtype.Int8
	ID       int64
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) error {
	_, err := q.db.Exec(ctx, updateMessageStatus, arg.StatusID, arg.ID)
	return err
}
