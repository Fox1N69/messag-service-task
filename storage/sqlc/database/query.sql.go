// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMessageByID = `-- name: GetMessageByID :one
SELECT id,
  content,
  created_at,
  status_id
FROM messages
WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.StatusID,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id,
  content,
  created_at,
  status_id
FROM messages
`

func (q *Queries) GetMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.StatusID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessedMessages = `-- name: GetProcessedMessages :many
SELECT pm.id,
  pm.message_id,
  pm.processed_at,
  pm.kafka_topic,
  pm.kafka_partition,
  pm.kafka_offset,
  m.content
FROM processed_messages pm
  JOIN messages m ON pm.message_id = m.id
`

type GetProcessedMessagesRow struct {
	ID             int64
	MessageID      pgtype.Int8
	ProcessedAt    pgtype.Timestamptz
	KafkaTopic     pgtype.Text
	KafkaPartition pgtype.Int4
	KafkaOffset    pgtype.Int8
	Content        string
}

func (q *Queries) GetProcessedMessages(ctx context.Context) ([]GetProcessedMessagesRow, error) {
	rows, err := q.db.Query(ctx, getProcessedMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProcessedMessagesRow
	for rows.Next() {
		var i GetProcessedMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.ProcessedAt,
			&i.KafkaTopic,
			&i.KafkaPartition,
			&i.KafkaOffset,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages (content, status_id)
VALUES ($1, $2)
RETURNING id
`

type InsertMessageParams struct {
	Content  string
	StatusID pgtype.Int8
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertMessage, arg.Content, arg.StatusID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertProcessedMessage = `-- name: InsertProcessedMessage :one
INSERT INTO processed_messages (
    message_id,
    kafka_topic,
    kafka_partition,
    kafka_offset
  )
VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertProcessedMessageParams struct {
	MessageID      pgtype.Int8
	KafkaTopic     pgtype.Text
	KafkaPartition pgtype.Int4
	KafkaOffset    pgtype.Int8
}

func (q *Queries) InsertProcessedMessage(ctx context.Context, arg InsertProcessedMessageParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertProcessedMessage,
		arg.MessageID,
		arg.KafkaTopic,
		arg.KafkaPartition,
		arg.KafkaOffset,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
UPDATE messages
SET status_id = $1
WHERE id = $2
`

type UpdateMessageStatusParams struct {
	StatusID pgtype.Int8
	ID       int64
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) error {
	_, err := q.db.Exec(ctx, updateMessageStatus, arg.StatusID, arg.ID)
	return err
}
